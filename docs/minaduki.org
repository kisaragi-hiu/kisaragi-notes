#+title: Minaduki

* Introduction

Minaduki is my fork of Org-roam v1.

It has support for reading Obsidian vaults.

* Concepts
** minaduki-mode

=minaduki-mode= is a global minor mode. When a buffer is visiting a file tracked by Minaduki, =minaduki-local-mode= will be enabled, which sets up local hooks to update the backlinks buffer, update the cache after save, etc.

In general, do not enable =minaduki-local-mode= manually. It's only really a minor mode as an elegant way to define key bindings local to files tracked by Minaduki.

** Templates

The templating system is a mess right now.

I didn't like how org-roam-capture specifies templates in a variable, so I tried to write =kisaragi-notes-templates.el=, but it's still incomplete.

Goals:

- Templates stored as files in =<vault>/templates=
- Addressed by file name
  - todo: how to resolve multiple formats (eg. =daily.org= and =daily.md=)?
- Command to create notes based on a template
- Templates can specify properties
- Can be made independent of the rest of Minaduki

** Vaults

A vault represents a path full of notes.

If a vault has a name, it can be linked to from other places.

There will also be other vault properties. =skipped= means the vault is not automatically indexed when =minaduki-db/build-cache= runs. Instead, files are only cached when you visit and edit them.

Links can specify a vault. If a link doesn't specify a vault, that makes it a normal relative or absolute link, so it will refer to paths inside the current vault.

Additionally, some commands like =minaduki/open-index= will use a default vault.

- Variable: minaduki/vaults

  A list of vaults. Each vault is either a path or a plist =(:name NAME :path PATH :skipped SKIPPED)=.

  #+begin_src elisp
  (setq minaduki/vaults
        '((:name "notes" :path "~/notes" :skipped nil)
          (:name "cloud" :path "~/Dropbox" :skipped t)))
  #+end_src

The name of a vault can be used to link to it. In Org this is the same as setting =org-link-abbrev-alist=. In this example, to link to =~/Dropbox=, write:

#+begin_src org
[[cloud:myfile.org]]
#+end_src

which will refer to =~/Dropbox/myfile.org=.

Right now the main vault is set with =org-directory=.

Subdirectories containing ~minaduki-nested-vault-root-files~ are considered /nested vaults/. Right now this is only used to implement Obsidian's default /shortest link when possible/ links.

- [ ] Markdown: following adheres to minaduki/vaults
- [ ] Markdown: extracting adheres to minaduki/vaults
- [ ] Markdown: insertion adheres to minaduki/vaults
** Keywords
*** How keywords are specified

In Markdown, keywords are specified in YAML front matter. There is no special treatment for plural noun keys — yes, “aliases” is a better key for a list of aliases, but that complicates things somewhat as the same keywords have to work in Org.

#+begin_src yaml
---
title: Hello world
# Specified as an inline list
key: ["key1", "https://example.com/key2"]
---
#+end_src

In Org, keywords are specified using =#+KEYWORD: VALUE=. Multiple occurrences of the same key specifies multiple values, not concatenated into one value (this is unlike how Org itself handles =TITLE= while exporting).

*** Keyword reference
- title :: the main title of the file.
- created :: the timestamp (in =YYYY-MM-DDThh:mm:ssZ=) when the file was first created
- alias :: an alternative title.
- key :: a unique identifier for this file. Could be a link or any other ID. This is used to associate bibliography items with note files, as well as for citation backlinks.
- (to be renamed) =roam_tags= :: a list of tags.

** Bibliography

Bibliography entries are written in a custom Org-based format. Support for other formats like BibTeX is planned.

Set bibliography files with =minaduki-lit/bibliography=.

Use =minaduki/literature-entries= to browse all literature entries. After you select an entry, you can:

- insert a citation to the entry
- copy its key
- edit its associated note (the one that has a =roam_key= equal to this entry)
- insert a link to its associated note
- show the definition of the entry in the bibliography, or
- open its associated URL, DOI, or PDF.

This is essentially my reimplementation of =bibtex-completion=.

Org-cite is supported: instead of using =org-cite-global-bibliography= you can just use =minaduki-lit/bibliography= and =org-cite-insert= will offer completions from the right place. This is accomplished with a custom Org-cite processor.

Reading from Org-cite's local bibliography is not yet supported though.

* Tutorials
** Browsing notes

Use =minaduki/open= to see a list of indexed notes. Select one to open.

If [[https://github.com/minad/marginalia/][Marginalia]] is installed, you'll see the file name listed in the completion as well.

Press RET to visit the note.

Headline notes are indicated with a leading star (regardless of heading level or whether it's Markdown or Org). Headline notes are headlines that have an =ID= property.

** Obsidian support

Obsidian links are supported. You can follow them, and they are tracked by backlinks.

In an Obsidian vault, the file name is used as the main title.

Try cloning a public Obsidian vault like [[https://github.com/sw-yx/brain][sw-yx/brain]] or [[https://help.obsidian.md/][Obsidian Help]]. Backlinks and title search should just work.
